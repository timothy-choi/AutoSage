name: One-Time Auto Commit

on:
  schedule:
    - cron: '7 23 26 6 *'  # Runs at 10:00 UTC on June 26
  workflow_dispatch:

jobs:
  auto-commit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Create ZoomReactionTrackerHelper.py safely
      shell: bash
      run: |
        mkdir -p backend/Components/Zoom
        echo 'import requests' > backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'from datetime import datetime' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'ALLOWED_REACTIONS = ["clap", "heart", "thumbs_up"]' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'REACTION_EMOJIS = {' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    "clap": "👏",' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    "heart": "❤️",' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    "thumbs_up": "👍",' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    "laugh": "😂",' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    "wow": "😲"' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '}' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'def parse_reaction_event(payload: dict):' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    obj = payload.get("payload", {}).get("object", {})' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    participant = obj.get("participant", {})' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    return {' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "meeting_id": obj.get("id"),' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "participant_user_id": participant.get("user_id"),' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "participant_name": participant.get("user_name"),' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "email": participant.get("email"),' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "reaction_type": participant.get("reaction_type"),' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        "timestamp": participant.get("time")' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    }' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'def is_reaction_allowed(reaction_type: str):' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    return reaction_type in ALLOWED_REACTIONS' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'def is_email_domain_allowed(email: str, allowed_domains: list):' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    return any(email.endswith("@" + domain.strip()) for domain in allowed_domains)' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'def format_human_time(iso_timestamp: str):' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    try:' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        return datetime.fromisoformat(iso_timestamp.replace("Z", "+00:00")).strftime("%Y-%m-%d %H:%M:%S UTC")' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    except Exception:' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        return iso_timestamp' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo 'def forward_reaction_to_webhook(reaction_data, webhook_url):' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    try:' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        response = requests.post(webhook_url, json=reaction_data)' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        return {"status_code": response.status_code, "text": response.text}' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '    except Exception as e:' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py
        echo '        return {"error": str(e)}' >> backend/Components/Zoom/ZoomReactionTrackerHelper.py

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Commit and push
      run: |
        git add backend/Components/Zoom/ZoomReactionTrackerHelper.py
        git commit -m "Added ZoomReactionTrackerHelper automatically" || echo "No changes to commit"
        git push
