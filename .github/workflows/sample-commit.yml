name: One-Time Auto Commit

on:
  schedule:
    - cron: '0 10 26 6 *'  # Runs at 10:00 UTC on June 26
  workflow_dispatch:

jobs:
  auto-commit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Create ZoomReactionTrackerHelper.py
      run: |
        mkdir -p backend/Components/Zoom
        cat <<'EOF' > backend/Components/Zoom/ZoomReactionTrackerHelper.py
import requests

ALLOWED_REACTIONS = ["clap", "heart", "thumbs_up"]
REACTION_EMOJIS = {
    "clap": "üëè",
    "heart": "‚ù§Ô∏è",
    "thumbs_up": "üëç",
    "laugh": "üòÇ",
    "wow": "üò≤"
}

def parse_reaction_event(payload: dict):
    obj = payload.get("payload", {}).get("object", {})
    participant = obj.get("participant", {})

    return {
        "meeting_id": obj.get("id"),
        "participant_user_id": participant.get("user_id"),
        "participant_name": participant.get("user_name"),
        "email": participant.get("email"),
        "reaction_type": participant.get("reaction_type"),
        "timestamp": participant.get("time")
    }

def is_reaction_allowed(reaction_type: str):
    return reaction_type in ALLOWED_REACTIONS

def is_email_domain_allowed(email: str, allowed_domains: list):
    return any(email.endswith("@" + domain.strip()) for domain in allowed_domains)

def forward_reaction_to_webhook(reaction_data, webhook_url):
    try:
        response = requests.post(webhook_url, json=reaction_data)
        return {"status_code": response.status_code, "text": response.text}
    except Exception as e:
        return {"error": str(e)}
EOF

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Commit and push
      run: |
        git add backend/Components/Zoom/ZoomReactionTrackerHelper.py
        git commit -m "Added ZoomReactionTrackerHelper automatically" || echo "No changes to commit"
        git push
